Dumitrescu Andrei 333CC

Structuri necesare:

- my_thread => structura in care tin datele despre thread-uri, cum ar fi
				handler-ul, prioritatea, status, cat timp ruleaza, un semafor
				care il pune in waiting pentur a putea rula, IO-ul necesar
				pentru a fi repornit din WAITING.

- so_scheduler => structura care defineste scheduler-ul cu lista de thread-uri,
					thread-ul curent, coada si variabile care definesc cuanta
					de timp, verificarea scheduler-ului daca a fost deja
					initializat, numarul de elemente IO.


Implementare:
	- am implementat toate functiile.
	- am folosit semafoare pentru a pune thread-urile in asteptare pana cand
		primesc sem_post pentru a rula urmatoarea comanda.
	- fiecare thread are semaforul sau.
	- flow-ul ar fi urmatorul:
		- initializez scheduler-ul
		- pornesti un nou thread si initializezi semaforul pentru el
		- il bagi in coada si in lista de thread-uri
		- thread-ul se pune in wait folosind semaforul si va iesi din aceasta
		   stare cand va primi sem_post de la scheduler.
		- daca va iesi din wait, va rula handler-ul si se va schimba in
			TERMIANTED
		- tot in fork, verific daca thread-ul curent e diferit de NULL. Daca
			e null, atunci caut un thread valid de a rula. In alt caz, rulez
			so_exec.
		- Pentru a da schedule, verific daca mai sunt thread-uri in lista.
		- Daca mai sunt thread-uri mai bune dpdv al prioritatii, atunci ii fac
			update. La final rulez thread-ul si il trec in starea RUNNING.
		- Daca primeste thread-ul curent un semnal de wait, atunci
			atunci fac update la status si la thread-ul care va rula.
		- La so_signal trezesc toate thread-urile din WAITING cu semnalul io
		- La so_exec doar scad timpul si caut un alt thread daca este mai bun
		- La so_end dealoc memoria si inchid thread-urile.
		